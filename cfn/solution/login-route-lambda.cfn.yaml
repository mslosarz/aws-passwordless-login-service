AWSTemplateFormatVersion: 2010-09-09
Description: Stack for route /login/{proxy+} and lambda

Parameters:
  SolutionName:
    Type: String
  ArtifactName:
    Type: String
  S3Bucket:
    Type: String
  Version:
    Type: String
  ApiId:
    Type: String

  DomainName:
    Type: String

  LambdaName:
    Type: String
  LoginRequestsTableName:
    Type: String
  LoginRequestsTableArn:
    Type: String
  UsersTableArn:
    Type: String
  UsersTableName:
    Type: String

  EMailTemplate:
    Type: String
  EMailTemplateName:
    Type: String
  EMailConfigurationSet:
    Type: String

Resources:
  Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiId
      RouteKey: ANY /login/{proxy+}
      Target: !Sub integrations/${LambdaIntegration}

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  RoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/ANY/login/*

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${Version}/${ArtifactName}.jar
      Description: !Sub 'Lambda for /login/{proxy+} HTTP API GW'
      FunctionName: !Sub '${SolutionName}-${LambdaName}-${AWS::AccountId}'
      Handler: pl.software2.awsblocks.LambdaHandler::handleRequest
      MemorySize: 512
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: java21
      Timeout: 15
      Environment:
        Variables:
          TEMPLATE_NAME: !Ref EMailTemplateName
          DOMAIN_NAME: !Ref DomainName
          NO_REPLY_ACCOUNT: no-reply
          LOGIN_REQUESTS_TABLE: !Ref LoginRequestsTableName
          USERS_TABLE: !Ref UsersTableName
          TOKEN_VALIDITY_IN_MINUTES: 10
          ACCESS_TOKEN_TTL_IN_MINUTES: 60
          JWT_TOKEN_SECRET_NAME: !Sub '/${SolutionName}/Secret/JWTTokenHMACKey'
      Tags:
        - Key: SolutionName
          Value: !Ref SolutionName
        - Key: ArtifactName
          Value: !Ref ArtifactName
    DependsOn:
      - LambdaLogGroup
      - LambdaExecutionRole

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SolutionName}-${LambdaName}-${AWS::AccountId}'
      RetentionInDays: 5

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda-logging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SolutionName}-${LambdaName}-${AWS::AccountId}:*
        - PolicyName: users-and-login-requests-dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Ref LoginRequestsTableArn
                  - !Ref UsersTableArn
        - PolicyName: sending-templated-emails
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:Send*
                Resource:
                  - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*
                  - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/${EMailTemplate}
                  - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${EMailConfigurationSet}
        - PolicyName: jwt-token-secret-value-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${SolutionName}/Secret/JWTTokenHMACKey*